#!/usr/bin/env bash

# Get command line arguments
COLOR_SCHEME="$1"

# Define location of cache and themes
CACHE_DIR=$HOME/.cache/squash
THEME_DIR=$HOME/.config/squash/themes
WM=$(head -n 1 $CACHE_DIR/wm)

# Make newlines easier, and define sequence
NEWLINE=$'\n'
sequence=""
tconf=$(cat ~/.config/termite/config | awk 'NR<=21')
# remove old cache files
cleanup() 
{
   rm -f $CACHE_DIR/x_colors
}

# reloads xterminals in place
reload_x()
{
   for term in /dev/pts/[0-9]*; do
      printf "%b" "$sequence" > "$term"
   done
}

merge_x() 
{
   xrdb ${HOME}/.Xresources
}

# kills old polybar and reloads
reload_polybar() 
{
   pkill -x polybar
   polybar base &
}

reload_lemonbar() 
{
   pkill -x lemonbar 
   bar &
}

set_wallpaper() 
{
   pkill -x nitrogen
   hsetroot -fill ${wallpaper}
   cp ${wallpaper} "/tmp/screen.png"
}

h_wall()
{
	exec /home/daniel/bin/hwall
}

# builds an array of all necessary colors
# the last three elements of the array are
# the bg, fg, and cursor color
get_colors() 
{
   . $THEME_DIR/$COLOR_SCHEME
   COLOR_ARRAY=($blk $red $grn $ylw $blu $mag $cyn $wht \
                $bblk $bred $bgrn $bylw $bblu $bmag $bcyn $bwht)
}

# adds main colors to sequence 0-15. Colors are defined in the 
# COLOR_ARRAY
create_main_sequence() 
{
   for i in {0..15}
   do
      sequence+="\033]4;${i};${COLOR_ARRAY[${i}]}\007"
   done
}

# adds background and foreground colors to sequence
# does not rely on array, uses sourced variables
create_secondary_sequence() 
{
   # add foreground
   for i in 10 12 13; do
      sequence+="\033]${i};${fg}\007"
   done

   # add background
   for i in 11 14 708; do
      sequence+="\033]${i};${bg}\007"
   done
}

write_x_source() 
{
   x_output=""
   x_output+="*.foreground:   ${fg}${NEWLINE}"
   x_output+="*.background:   ${bg}${NEWLINE}"
   x_output+="*.cursorColor:  ${fg}${NEWLINE}"

   for i in {0..15}; do
      x_output+="*.color${i}: ${COLOR_ARRAY[${i}]}${NEWLINE}"
   done
}

write_rofi() 
{
   rofi_output=""
   rofi_output+="rofi.color-enabled: true${NEWLINE}"
   rofi_output+="rofi.color-window: ${bg}, ${bg}, ${blk}${NEWLINE}"
   rofi_output+="rofi.color-normal: ${bg}, ${fg}, ${bg}, ${blk}, ${cyn}${NEWLINE}"
}

# Writes CSS colors for use with programs such as firefox to 
# $CACHE_DIR/colors.css
write_css() 
{
   css_output=""
   css_output+=":root {${NEWLINE}"
   css_output+="\t--wallpaper: url("${wallpaper}");${NEWLINE}"
   css_output+="\t--background: ${bg};${NEWLINE}"
   css_output+="\t--foreground: ${fg};${NEWLINE}"
   for i in {0..15}; do
      css_output+="\t--color${i}: ${COLOR_ARRAY[${i}]};${NEWLINE}"
   done
   css_output+="}"
   printf "${css_output}" > "${CACHE_DIR}/colors.css"
}

# Writes SH Colors for use with programs such as lemonbar
# to $CACHE_DIR/colors
write_sh() 
{
   rm -f $CACHE_DIR/colors
   cp $THEME_DIR/$COLOR_SCHEME $CACHE_DIR/colors
}

# Writes X Output, Rofi output, and 2bwm output to x_colors
# in $CACHE_DIR
write_all_x() 
{
   output=${x_output}${rofi_output}
   echo $output
   printf "${output}" > "${CACHE_DIR}/x_colors"
}

write_x_define() 
{
   xd_output=""
   xd_output+="#define bg   ${bg}${NEWLINE}"
   xd_output+="#define blk   ${blk}${NEWLINE}"
   xd_output+="#define bblk   ${bblk}${NEWLINE}"
   xd_output+="#define fg   ${fg}${NEWLINE}"
   xd_output+="#define red   ${red}${NEWLINE}"
   xd_output+="#define bred   ${bred}${NEWLINE}"
   xd_output+="#define grn   ${grn}${NEWLINE}"
   xd_output+="#define bgrn   ${bgrn}${NEWLINE}"
   xd_output+="#define ylw   ${ylw}${NEWLINE}"
   xd_output+="#define bylw   ${bylw}${NEWLINE}"
   xd_output+="#define blu   ${blu}${NEWLINE}"
   xd_output+="#define bblu   ${bblu}${NEWLINE}"
   xd_output+="#define mag   ${mag}${NEWLINE}"
   xd_output+="#define bmag   ${bmag}${NEWLINE}"
   xd_output+="#define cyn   ${cyn}${NEWLINE}"
   xd_output+="#define bcyn   ${bcyn}${NEWLINE}"
   xd_output+="#define wht   ${wht}${NEWLINE}"
   xd_output+="#define bwht   ${bwht}${NEWLINE}"

   printf "${xd_output}" > "$CACHE_DIR/xd_colors"
}

write_termite()
	{
		termite_output+="${tconf}${NEWLINE}"
		termite_output+="color0 = ${blk}${NEWLINE}"
		termite_output+="color1 = ${red}${NEWLINE}"
		termite_output+="color2 = ${grn}${NEWLINE}"
		termite_output+="color3 = ${ylw}${NEWLINE}"
		termite_output+="color4 = ${blu}${NEWLINE}"
		termite_output+="color5 = ${mag}${NEWLINE}"
		termite_output+="color6 = ${cyn}${NEWLINE}"
		termite_output+="color7 = ${wht}${NEWLINE}"
		termite_output+="color8 = ${bblk}${NEWLINE}"
		termite_output+="color9 = ${bred}${NEWLINE}"
		termite_output+="color10 = ${bgrn}${NEWLINE}"
		termite_output+="color11 = ${bylw}${NEWLINE}"
		termite_output+="color12 = ${bblu}${NEWLINE}"
		termite_output+="color13 = ${bmag}${NEWLINE}"
		termite_output+="color14 = ${bcyn}${NEWLINE}"
		termite_output+="color15 = ${bwht}${NEWLINE}"
		termite_output+="foreground = ${fg}${NEWLINE}"
		termite_output+="background = ${bg}${NEWLINE}"
		termite_output+="cursor = ${fg}${NEWLINE}"
		
		printf "${termite_output}" > "/home/daniel/.config/termite/config"
}

i3reload()
{
	i3 reload &
}

obcol()
{
	obsquash &
}

hcreload()
{
	exec herbstclient reload &
}

rofcol()
{
	exec /home/daniel/bin/rofisquash &
}


if [ -f $THEME_DIR/$COLOR_SCHEME ]; then
    # Remove old colors
    cleanup

    # Source color directory
    get_colors

    # Create sequence to reload opened terminals
    create_main_sequence
    create_secondary_sequence

    # Reload all x terminals
    reload_x	

    # Write all colors files to .cahe
    write_x_source
    write_rofi
    write_all_x
    write_sh
    write_termite
    write_x_define

    # Merge x colors
    merge_x
    reload_lemonbar
    rofcol
	#i3reload
	obcol

    # Set wallpaper
    h_wall
else
    printf "ERROR : THEME FILE NOT FOUND"
fi
