1
00:00:00,030 --> 00:00:06,420
So, a couple videos ago I had said that if we don't use

2
00:00:06,420 --> 00:00:10,260
quotations here it's going to think

3
00:00:06,420 --> 00:00:10,260
we're passing in multiple values each

4
00:00:10,260 --> 00:00:16,699
one as a variable. So when you write a

5
00:00:10,260 --> 00:00:16,699
word in JavaScript that is not in quotes,

6
00:00:16,699 --> 00:00:22,650
JavaScript doesn't know that it's

7
00:00:16,699 --> 00:00:22,650
supposed to just be a string or a sentence,

8
00:00:22,650 --> 00:00:28,619
for instance. So we tell it that it is by

9
00:00:22,650 --> 00:00:28,619
using quotations. So, we're going to be

10
00:00:28,619 --> 00:00:33,180
learning a bit more about variables and

11
00:00:28,619 --> 00:00:33,180
strings in this next line. You create a

12
00:00:33,180 --> 00:00:39,480
variable in JavaScript by using the

13
00:00:33,180 --> 00:00:39,480
keyword var, and notice how it turns blue

14
00:00:39,480 --> 00:00:43,860
in my editor, and I'm going to hit space

15
00:00:39,480 --> 00:00:43,860
and now we're going to name the variable.

16
00:00:43,860 --> 00:00:51,930
So, I'm going to name it welcome_message, and then you put a space and an equal

17
00:00:51,930 --> 00:00:57,719
sign, and you're going to assign a value

18
00:00:51,930 --> 00:00:57,719
to be used every time we use welcome

19
00:00:57,719 --> 00:01:02,640
message in our code. And so in this case

20
00:00:57,719 --> 00:01:02,640
it's going to say "This is a welcome

21
00:01:02,640 --> 00:01:10,710
message stored inside a variable." We're

22
00:01:02,640 --> 00:01:10,710
going to end that with a semicolon. Now,

23
00:01:10,710 --> 00:01:18,030
this is a string. It's going to be used as

24
00:01:10,710 --> 00:01:18,030
though it were text. This is not. This is

25
00:01:18,030 --> 00:01:23,250
going to be used as though it has a

26
00:01:18,030 --> 00:01:23,250
value inside of this, but this is not the

27
00:01:23,250 --> 00:01:27,689
value. This is called a variable. So what

28
00:01:23,250 --> 00:01:27,689
I'm going to do down here is I'm going to

29
00:01:27,689 --> 00:01:36,030
alert welcome_message, and

30
00:01:27,689 --> 00:01:36,030
what's going to happen here is when the

31
00:01:36,030 --> 00:01:39,689
page loads it's going to call the alert

32
00:01:36,030 --> 00:01:39,689
function and what it's going to pass into

33
00:01:39,689 --> 00:01:45,270
it to you know use as the content of the

34
00:01:39,689 --> 00:01:45,270
alert is going to be welcome message, but

35
00:01:45,270 --> 00:01:51,720
it's not just going to print out welcome

36
00:01:45,270 --> 00:01:51,720
message, is that a capital L? No, it's just

37
00:01:51,720 --> 00:01:56,219
how it slanted it there. It made it

38
00:01:51,720 --> 00:01:56,219
italicized, rather. It's not going to

39
00:01:56,219 --> 00:01:59,670
print out welcome message it's going to

40
00:01:56,219 --> 00:01:59,670
print out the value that we've assigned

41
00:01:59,670 --> 00:02:05,340
to that welcome message. So, it's you know you can rather than printing out

42
00:02:05,340 --> 00:02:09,539
if we wanted to to do this multiple

43
00:02:05,340 --> 00:02:09,539
times, we wouldn't want to write this out

44
00:02:09,539 --> 00:02:13,430
multiple times. We're just going to you

45
00:02:09,539 --> 00:02:13,430
know

46
00:02:13,430 --> 00:02:20,000
alert that multiple times. Let's save it and

47
00:02:13,430 --> 00:02:20,000
refresh, and as you'll see it does print

48
00:02:20,000 --> 00:02:24,920
out the value of the variable not the

49
00:02:20,000 --> 00:02:24,920
variable name. So, that's what a variable

50
00:02:24,920 --> 00:02:32,299
is and that's what a string is. Now, these

51
00:02:24,920 --> 00:02:32,299
are types. So what a type is basically what

52
00:02:32,299 --> 00:02:43,970
type of type is this...what type is this?

53
00:02:32,299 --> 00:02:43,970
So, this type is a keyword, this type is a

54
00:02:43,970 --> 00:02:49,730
variable, and this type is a string. Let's

55
00:02:43,970 --> 00:02:49,730
say we want to create a variable called

56
00:02:49,730 --> 00:02:58,430
age, or rather myAge. We're going to

57
00:02:49,730 --> 00:02:58,430
set it equal to my age which right now

58
00:02:58,430 --> 00:03:06,139
is 28 I believe...that sounds right. Alright, so, now notice that I did not put

59
00:03:06,139 --> 00:03:13,220
this into quotations, that's very

60
00:03:06,139 --> 00:03:13,220
important. Integers, or full numbers, do

61
00:03:13,220 --> 00:03:17,810
not go inside of quotations unless you

62
00:03:13,220 --> 00:03:17,810
want them to be a string which you can't

63
00:03:17,810 --> 00:03:24,220
do like math on for instance. So this is

64
00:03:17,810 --> 00:03:24,220
a number, it's a number. Now, a float is

65
00:03:24,220 --> 00:03:31,989
kind of like a number as well. So, let's

66
00:03:24,220 --> 00:03:31,989
go ahead and say

67
00:03:31,989 --> 00:03:44,930
exactAge. I'm going to set that's 28.23, sounds about right.

68
00:03:44,930 --> 00:03:51,049
So, what this is, is a float. And what that

69
00:03:44,930 --> 00:03:51,049
means is it's a floating-point number, it

70
00:03:51,049 --> 00:03:55,280
has a decimal in it. So if you were

71
00:03:51,049 --> 00:03:55,280
writing out $28 and 23 cents, for

72
00:03:55,280 --> 00:04:01,639
instance, it would be 28.23 not

73
00:03:55,280 --> 00:04:01,639
just 28. So that's how you would write it

74
00:04:01,639 --> 00:04:05,959
in JavaScript. This is a float, and this

75
00:04:01,639 --> 00:04:05,959
up here is an integer. And we're going to

76
00:04:05,959 --> 00:04:13,849
be discussing those more at some point,

77
00:04:05,959 --> 00:04:13,849
but for the most part these you can play

78
00:04:13,849 --> 00:04:17,840
around with these now. You can actually

79
00:04:13,849 --> 00:04:17,840
do math with these because they're numbers,

80
00:04:17,840 --> 00:04:22,590
but if we put them in quotations we

81
00:04:17,840 --> 00:04:22,590
wouldn't be able to do math on them.

82
00:04:22,590 --> 00:04:28,530
And, I'm going to show you guys what I

83
00:04:22,590 --> 00:04:28,530
mean right now actually. So I'm going to

84
00:04:28,530 --> 00:04:38,910
remove this and I'm going to print myAge plus exactAge. I'm going to save it,

85
00:04:38,910 --> 00:04:43,320
and now when I go back to refresh this

86
00:04:38,910 --> 00:04:43,320
this is going to print out

87
00:04:43,320 --> 00:04:48,210
56.23 because it knows that it

88
00:04:43,320 --> 00:04:48,210
can do that operation on this. It can add

89
00:04:48,210 --> 00:04:53,270
28 to 28.23 because they are numbers. What happens when I

90
00:04:53,270 --> 00:05:00,030
change both of them to strings like this

91
00:04:53,270 --> 00:05:00,030
by putting quotations around them and

92
00:05:00,030 --> 00:05:06,630
making them text instead of numbers? I'm going to refresh and it says it's

93
00:05:06,630 --> 00:05:09,930
2828.23, and that's because it's just putting

94
00:05:09,930 --> 00:05:17,669
those two strings together as though

95
00:05:09,930 --> 00:05:17,669
they were this, alright. So, that's the

96
00:05:17,669 --> 00:05:21,510
difference between a string and an

97
00:05:17,669 --> 00:05:21,510
integer, well that's the main difference

98
00:05:21,510 --> 00:05:30,600
I guess. Another thing is that we can't

99
00:05:21,510 --> 00:05:30,600
add an integer to a string. You may have

100
00:05:30,600 --> 00:05:33,870
guessed this, and we can't add a

101
00:05:30,600 --> 00:05:33,870
float to a string. So I'm going to say

102
00:05:33,870 --> 00:05:39,870
welcome_message plus exactAge. So this should print out this is a welcome

103
00:05:39,870 --> 00:05:43,289
message stored inside a variable 28.23. That's what we

104
00:05:43,289 --> 00:05:55,039
would expect to happen. So, okay

105
00:05:43,289 --> 00:05:55,039
refresh. Oh, it did do that, alright. That was

106
00:05:55,039 --> 00:06:03,440
an integer. Okay, was it the console.log that didn't work in.

107
00:06:09,380 --> 00:06:13,940
So, it converts it all to a string now. That never used to be that way, at

108
00:06:13,940 --> 00:06:20,180
least as I'm thinking. We can also

109
00:06:13,940 --> 00:06:20,180
separate them by a comma here, and that

110
00:06:20,180 --> 00:06:25,420
leaves this as a floating point, so if

111
00:06:20,180 --> 00:06:25,420
you need to use that later on you can.

112
00:06:25,420 --> 00:06:30,260
And then we also have other types. You

113
00:06:25,420 --> 00:06:30,260
can use single quotes for strings as

114
00:06:30,260 --> 00:06:33,410
well, but we're just going to leave it at

115
00:06:30,260 --> 00:06:33,410
this for right now. So, you guys now know

116
00:06:33,410 --> 00:06:41,630
how to create variables, strings, integers,

117
00:06:33,410 --> 00:06:41,630
floats, and you know how to call a few

118
00:06:41,630 --> 00:06:47,630
functions. So, moving on we're going to be discussing more about basic types and

119
00:06:47,630 --> 00:06:51,010
basic things you can do with them.

